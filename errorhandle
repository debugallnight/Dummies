
@Slf4j
@ControllerAdvice
public class ControllerExceptionHandler extends ResponseEntityExceptionHandler {
    
    /**
     * 500 series
     */
    @ExceptionHandler({ Throwable.class })
    public ResponseEntity<?> handleUnhandledError(Throwable t) {
        List<String> errorCodes = new ArrayList<String>();
        errorCodes.add(HttpStatus.INTERNAL_SERVER_ERROR.name());
        return localErrorResponse(t, errorCodes, t.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
    }
    
    /**
     * Errors from this microservice.
     */
    @ExceptionHandler({ MyNextRuntimeException.class })
    public ResponseEntity<?> handleInternalExceptions(MyNextRuntimeException t) {
        return localErrorResponse(t, t.getErrorCodes(), t.getMessage(), t.getHttpStatus());
    }
    
    protected ResponseEntity<Object> localErrorResponse(Throwable throwable, List<String> errorCodes,
            String message,
            HttpStatus status) {
        
        final String uid = UUID.randomUUID().toString();
        MDC.put(LoggingConstants.MDC_KEY_ERROR_ID, uid);
        
        if (throwable == null) {
            message = "Unknown error caught in RESTController";
            log.error(String.format("%s, {}", message), status);
        }
        
        ErrorResponseDto errorResponse = new ErrorResponseDto(errorCodes, throwable.getMessage(), uid);
        log.error(String.format("Error caught: %s", errorResponse.toString()), throwable);
        
        MDC.remove(LoggingConstants.MDC_KEY_ERROR_ID);
        
        return response(errorResponse, status);
        
    }
    
    protected <T> ResponseEntity<T> response(T body, HttpStatus status) {
        log.debug("Responding with a status of {}", status);
        return new ResponseEntity<T>(body, new HttpHeaders(), status);
    }
    
    @Override
    protected ResponseEntity<Object> handleExceptionInternal(Exception ex, Object body,
            HttpHeaders headers, HttpStatus status, WebRequest request) {
        
        if (HttpStatus.INTERNAL_SERVER_ERROR.equals(status)) {
            request.setAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE, ex, WebRequest.SCOPE_REQUEST);
        }
        
        List<String> errorCodes = new ArrayList<String>();
        errorCodes.add(status.name());
        
        return localErrorResponse(ex, errorCodes, ex.getMessage(), status);
    }
    
}
