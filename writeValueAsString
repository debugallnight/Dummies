    private String writeValueAsString(Object objectToWrite) {
        ObjectMapper mapper = jsonObjectMapper();
        mapper.configure(SerializationFeature.WRAP_ROOT_VALUE, false);
        ObjectWriter ow = mapper.writer().withDefaultPrettyPrinter();
        String jsonString = null;
        try {
            jsonString = ow.writeValueAsString(objectToWrite);
        } catch (JsonProcessingException e) {
            log.error("error in parsing object" + e.getLocalizedMessage());
        }
        return jsonString;
    }

    private ObjectMapper jsonObjectMapper() {
        return Jackson2ObjectMapperBuilder.json()
                .featuresToDisable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS) // ISODate
                .modules(new JSR310Module())
                .build();
    }
    
 @Test
    public void testSendFood() throws Exception {
        
        Food Food = getFood();
        SendFoodRequestDto requestDto = getSendFoodRequestDto();
        
        String jsonInput = writeValueAsString(requestDto);
        
        when(FoodService.save(Mockito.anyObject(), Mockito.anyObject()))
                .thenReturn(Food);
        
        mockMvc.perform(
                post(UrlConstants.URL_FoodS + "?action=SEND")
                        .contentType(MediaType.APPLICATION_JSON).content(jsonInput))
                .andExpect(status().isCreated())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
                .andExpect(jsonPath("$.FoodId").value(UUID))
                .andExpect(jsonPath("$.proposedUsername")
                        .value(requestDto.getProposedUsername()));
        
        verify(FoodService, times(1)).save(Matchers.argThat(new AnyFood()),
                Matchers.argThat(new AnyActionType()));
        verifyNoMoreInteractions(FoodService);
    }
    
